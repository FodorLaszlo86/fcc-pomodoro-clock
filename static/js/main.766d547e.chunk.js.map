{"version":3,"sources":["components/Timer.js","components/TimerCtrlPanel.js","components/DurationControls.js","components/Beep.js","components/PomodoroHeader.js","components/PomodoroFooter.js","App.js","serviceWorker.js","index.js"],"names":["Timer","_ref","minutes","seconds","sessionType","timeLeft","concat","toString","padStart","react_default","a","createElement","id","TimerCtrlPanel","timerCtrl","reset","paused","className","onClick","DurationControls","sessionDuration","breakDuration","incrementTime","decrementTime","Beep","src","type","muted","autoPlay","loop","PomodoroHeader","PomodoroFooter","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","state","clearInterval","intervalID","tickTock","countDown","_this$state$timeRemai","timeRemains","clockType","timerDisplay","document","getElementById","setState","playBeep","breakLength","style","backgroundColor","sessionLength","setInterval","startPauseTimer","adjustClockSession","changeType","adjustClockBreak","event","target","resetClockDefault","alarm","querySelector","pause","currentTime","play","_this$state$timeRemai2","_this$state","components_PomodoroHeader","components_DurationControls","components_Timer","components_TimerCtrlPanel","components_Beep","components_PomodoroFooter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.766d547e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Timer = ({ minutes, seconds, sessionType }) => {\n    const timeLeft = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    return (\n        <div id='timer-display'>\n            <div id='timer-label'>{ sessionType }</div>\n            <div id='time-left'>{ timeLeft }</div>\n        </div>\n    )\n}\n\nexport default Timer;","import React from 'react';\n\n\nconst TimerCtrlPanel = ({ timerCtrl, reset, paused }) => {\n    \n    return (\n        <div id='clock-controls'>\n             <button id='start_stop' className='clock-controls-btn' onClick={ timerCtrl }>\n                { \n                    paused ? \n                        <i className=\"material-icons\">play_arrow</i> \n                        : \n                        <i className=\"material-icons\">pause</i> \n                } \n            </button>\n            <button id='reset' className='clock-controls-btn' onClick={ reset } >\n                <i className=\"material-icons\">repeat</i>\n            </button>\n        </div>\n    )\n}\n\nexport default TimerCtrlPanel;","import React from 'react';\n\nconst DurationControls = ({ sessionDuration, breakDuration, incrementTime, decrementTime }) => {\n    return (\n        <div id='duration-controls'>\n            <div className='set-timer'>\n                <h3 id='session-label'>Session Length</h3>\n                <div className='set-timer-body'>\n                    <div id='session-decrement' onClick={ decrementTime }>&#8722;</div>\n                    <div id='session-length'>{ sessionDuration }</div>\n                    <div id='session-increment' onClick={ incrementTime }>&#43;</div>\n                </div>\n            </div>\n            <div className='set-timer'>\n                <h3 id='break-label'>Break Length</h3>\n                <div className='set-timer-body'>\n                    <div id='break-decrement' onClick={ decrementTime }>&#8722;</div>\n                    <div id='break-length'>{ breakDuration }</div>\n                    <div id='break-increment' onClick={ incrementTime }>&#43;</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DurationControls;","import React from 'react';\n\nconst Beep = () => {\n    return (\n        <audio\n            src='https://goo.gl/65cBl1'\n            type='audio/mpeg'\n            id='beep' \n            className='beep' \n            muted={ false }\n            autoPlay={ false }\n            loop={ false } \n        />\n    )\n}\n\nexport default Beep;","import React from 'react';\n\nconst PomodoroHeader = () => {\n    return (\n        <header>\n            <h1 id='title'>FCC Pomodoro Clock</h1>\n        </header>\n    )\n}\n\nexport default PomodoroHeader;","import React from 'react';\n\nconst PomodoroFooter = () => {\n    return (\n        <footer id='footer'>Code and Design by <span>Laszlo Fodor</span></footer>\n    )\n}\n\nexport default PomodoroFooter;","import React, { Component } from 'react';\nimport Timer from './components/Timer';\nimport TimerCtrlPanel from './components/TimerCtrlPanel';\nimport DurationControls from './components/DurationControls';\nimport Beep from './components/Beep';\nimport PomodoroHeader from './components/PomodoroHeader';\nimport PomodoroFooter from './components/PomodoroFooter';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timeRemains: {\n        minutes: 25,\n        seconds: 0,\n      },\n      clockType: 'session',\n      paused: true,\n      intervalID: null\n    }\n  }\n\n  componentDidMount = () => {\n    // controls stop-pause of the timer\n    if(this.state.paused) {\n      clearInterval(this.state.intervalID);\n    } else {\n      this.tickTock();\n    }\n  }\n\n\n  // Manages countdown timing, time value decrements minutes and seconds\n  countDown = () => {\n    const { minutes, seconds } = this.state.timeRemains;\n    const { clockType } = this.state;\n    const timerDisplay = document.getElementById('timer-display');\n    if(seconds > 0) {\n      this.setState({\n        timeRemains: {\n          seconds: this.state.timeRemains.seconds - 1,\n          minutes\n        }\n      })\n    }\n    else if (seconds === 0 && minutes > 0) {\n      this.setState({\n        timeRemains: {\n          seconds: 59,\n          minutes: this.state.timeRemains.minutes - 1\n        }\n      })\n    }\n\n    else if (seconds === 0 && minutes === 0) {\n      this.playBeep();\n      if (clockType === 'session') {\n        this.setState({\n          clockType: 'break',\n          timeRemains: {\n            seconds: 0,\n            minutes: this.state.breakLength\n          }\n        })\n        timerDisplay.style.backgroundColor = '#d12a2a';\n      } else {\n        this.setState({\n          clockType: 'session',\n          timeRemains: {\n            seconds: 0,\n            minutes: this.state.sessionLength\n          }\n        })\n        timerDisplay.style.backgroundColor = '#08490c'\n      }\n    }\n  }\n\n\n  // drives countdown,  clock update every 1000ms\n  tickTock = () => {\n    let intervalID = setInterval(this.countDown, 1000);\n    this.setState({\n      intervalID: intervalID\n    })\n\n  }\n\n\n  // start-stop timer countDown\n  startPauseTimer = () => {\n    const timerDisplay = document.getElementById('timer-display');\n    if(this.state.paused) {\n      this.setState({\n        paused: false\n      })\n      this.tickTock()\n      timerDisplay.style.backgroundColor = '#0a6b0f';\n    } else {\n      this.setState({\n        paused: true\n      })\n      clearInterval(this.state.intervalID);\n      timerDisplay.style.backgroundColor = '#0a6b0f70';\n    }\n  }\n\n  adjustClockSession = changeType => {\n    if(changeType === 'session-increment') {\n      this.setState({\n        timeRemains: {\n          minutes: this.state.sessionLength + 1,\n          seconds: 0\n        }\n      })\n    } \n    else if (changeType === 'session-decrement') {\n      this.setState({\n        timeRemains: {\n          minutes: this.state.sessionLength - 1,\n          seconds: 0\n        }\n      })\n    }\n  }\n\n  adjustClockBreak = changeType => {\n    if(changeType === 'break-increment' && this.state.timeRemains.minutes < 60) {\n      this.setState({\n        timeRemains: {\n          minutes: this.state.breakLength + 1,\n          seconds: 0\n        }\n      })\n    } \n    else if (changeType === 'break-decrement' && this.state.timeRemains.minutes > 1) {\n      this.setState({\n        timeRemains: {\n          minutes: this.state.breakLength - 1,\n          seconds: 0\n        }\n      })\n    }\n  }\n\n  incrementTime = (event) => {\n    if (this.state.paused) {\n      // increase session duration, ensures time does not go under 1 minute\n      if(event.target.id === 'session-increment' && this.state.sessionLength < 60) {\n        this.setState({\n          sessionLength: this.state.sessionLength + 1,\n          clockType: 'session'\n        })\n        this.adjustClockSession(event.target.id);\n      }\n      // increase break duration, ensures time does not go under 1 minute\n      else if (event.target.id === 'break-increment' && this.state.breakLength < 60)\n      this.setState({\n        breakLength: this.state.breakLength + 1,\n        clockType: 'break'\n      })\n      this.adjustClockBreak(event.target.id);\n    }\n  }\n\n  decrementTime = (event) => {\n    if (this.state.paused) {\n      // decrease session duration, ensures time does not go under 1 minute\n      if(event.target.id === 'session-decrement' && this.state.sessionLength > 1) {\n        this.setState({\n          sessionLength: this.state.sessionLength - 1,\n          clockType: 'session'\n        })\n        this.adjustClockSession(event.target.id);\n      }\n      // decrease break duration, ensures time does not go under 1 minute\n      else if (event.target.id === 'break-decrement' && this.state.breakLength > 1) {\n        this.setState({\n          breakLength: this.state.breakLength - 1,\n          clockType: 'break'\n        })\n        this.adjustClockBreak(event.target.id);\n      }\n    } \n  }\n\n  resetClockDefault = () => {\n    const alarm = document.querySelector('#beep');\n    // stop interval when reset pressed\n    clearInterval(this.state.intervalID);\n    // stop and rewind Alarm sound when reset pressed\n    alarm.pause();\n    alarm.currentTime = 0;\n\n    // reset state to default\n    this.setState({\n      sessionLength: 25,\n      breakLength: 5,\n      timeRemains: {\n        minutes: 25,\n        seconds: 0\n      },\n      clockType: 'session',\n      paused: true,\n      intervalID: null\n    })\n  }\n\n  playBeep = () => {\n    const beepSound = document.querySelector('#beep');\n    beepSound.play();\n  }\n\n\n  render() {\n    const { minutes, seconds } = this.state.timeRemains\n    const { breakLength, sessionLength, clockType, paused } = this.state;\n    return (\n      <div className=\"App\">\n\n        <PomodoroHeader />\n        <DurationControls \n            breakDuration={ breakLength } \n            sessionDuration={ sessionLength }\n            incrementTime={ this.incrementTime } \n            decrementTime={ this.decrementTime }\n        />\n        <Timer \n            minutes={ minutes } \n            seconds={ seconds } \n            sessionType={ clockType }  \n        />\n\n        <TimerCtrlPanel \n            timerCtrl={ this.startPauseTimer } \n            reset={ this.resetClockDefault }\n            paused={ paused }\n        />\n\n        <Beep />\n        <PomodoroFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}